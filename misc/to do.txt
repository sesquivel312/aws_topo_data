** look at support.populate_router_data - try to figure out how I can use it and/or add_explicit_subnet_edges to add edges for implicitly associated subnets
  The main route table is indicated by a subnet association with attributes Main = True and SubnetId = None (or key Main doesn't exist)
  There is no "association" information contained in the Subnet object!!! << this is what makes this difficult

Use the get routes function to identify nat instances and add them somewhere in the data model?


20170419 Look at terraform to ensure it's adding vpc endpoints and then verify the function getting vpce data into the ntework objects is working correctly!
20170421 add edges for unassociated subnets (not associated with a route table)
20170421 determine how to handle nodes that are in a state other than "in use", e.g. deleted - do we weant them in the DB or not, if they are we should render them differently and include a note when "rendering" to text - look at using some sort of data structure that returns a bunch of 2-tuples of networkx-node-lists & pyplot attributes for rendering those nodes

Just done: parsing rules by subnet (well almost done, needs some clean up ...)

Next: code checks against the rules by subnet.  Print out a report something like:
subnet id: xxxx
rule allows access from anywhere <subnet/host/sgid>
rule allows access from large address range <subnet/host/sgid>
rule allows access on a wide range of ports <subnet/host/sgid>
rule allows access to a high risk port <subnet/host/sgid>

Notes on above:
*** I likely will need to add additional code b/c I believe I've lost the subnet/host/sgid info in my rule parsing :(
* Will need to check if any of the high risk ports are in a port range
* will need to determine how to handle multiple issues/rule - i.e. 1 rule allows from anywhere for a large port range that happens to include high risk ports
    * ideally will have a single output line for a rule indicating all the rule violations, rather than multiple output lines for a single rule
* Will need to address rules that use a security group as a src - i.e. look that up - probably need to build a sg:CIDR map (figure out how this works I believe this means there could be multiple IP ranges / SG as the SGs are applied to hosts, not subnets


rules
----
src || dst == any
src || dst == "large" block (large is a variable)
port = "large" range (large is a variable)
port == "high risk" port

Futures:

Network ACL's
Internet networks (i.e. over VPNs)
Handling Tiers > this will require tagging standards