## Description
This file documents how we're storing data in a networkx.Graph object representing
the topology of an AWS VPC

----

vpcs = boto3 collection of vpcs

sec_groups = boto3 collection of security groups

sec_group_rule_dict = {  # this is collected by subnet - which is, in turn, collected by security group, in turn from instances and is NOT complete
  'sec_group_id': <sgid>,
  'inacl': [
    {
      'vpcid': <vpcid>,
      'subnetid': <subnetid>,
      'sec_grp_id': <sgid>,
      'direction': 'in'|'out',
      'sources': [<s1>, <s2>, ...], << sources can be security group ID's or CIDR ranges
      'proto': <protoname>, << string = tcp, upd, icmp, all,
      'port_range': (<start>,<end>)  < start, end are the starting and ending port numbers - can be the same
    },
  'outacl': [
    {
      'vpcid': <vpcid>,
      'subnetid': <subnetid>,
      'sec_grp_id': <sgid>,
      'direction': 'in'|'out',
      'sources': [<s1>, <s2>, ...], << sources can be security group ID's or CIDR ranges
      'proto': <protoname>, << string = tcp, upd, icmp, all,
      'port_range': (<start>,<end>)  < start, end are the starting and ending port numbers - can be the same
    }
  ]
}

network (dict):
    <vpc_id> (string): AWS vpc ID
        <networkx.Graph>: holds topology and other data (see below)

---

networkx.Graph:

  graph (dict): arbitrary data related to graph
    acct_id (str): aws account ID to which this vpc belongs
    vpc_id (string): AWS vpc ID, this is redundant w/the key for the graph in the networks dict, makes simpler lookups
    vpc_name (string): name of VPC from tags or the vpc-id if name !exist
    name: (string): networkx.Graph.name set to vpc_name at graph creation time  # this is what __str__ looks for when one does: print G, set this to b
    cidr: <aws cidr assoc w/VPC>
    isdefault: <aws flag indicating this is the default vpc in the account>
    state: <string indicating the state of the aws VPC> << not sure of possible values
    main_route_table: <rtbid>
    dhcp_opt_id (string): id of dhcp options set assocaited w/this VPC
    nacls (dict):
      id (dict):
        name (string): taken from NetworkAcl.tags (or NOT EXIST if there isn't a Name tag)
        default (boolean): True if this is the default NACL for this VPC
        assoc_subnets (list): list of subnet ID's to which this NACL applies
        ingress|egress_entries (list): each entry is a dict, one list for ingress rules and one for egress
          number (int): rule # (determines order?)
          action (string): allow|deny  NB: sg rules don't have an 'action' property b/c they are allow only
          protocol (string): name of protocol, e.g. tcp, udp, icmp, all
          src_dst (list): source or dest range in CIDR notation, depending on direction of rule, the list will (?) have only one entry, it's a list to be consistent with src_dst in rules originating from sec-groups - i.e. functions that process rules expect this to be a list
          ports (tuple): 2tuple of the form (start, end), where the port range is start-end (end=start if one port)
        tags (list): of dicts of AWS tags
    tags (list): of dicts
        {
         Key (string): key name,
         Value (string): value associated w/key
         }
    instances (dict): dict of dicts of instance data
      {
        <instance ID> (str):
            {
              ssh_key_name (str): name of SSH key used to create this instance, might indicate user that created the instance
              priv_ipv4 (str): private IPv4 address - I assume assigned to the "primary" interface of this instance
              priv_hostname (str): private DNS name
              platform (str): 'Windows'|None
              state (str): ending|running|shutting-down|terminated|stopping|stopped
              tags (list): list of AWS tags (list of dicts)
              root_dev (str): name of root device (e.g. /dev/sda1)
              root_create_time (str): time root device was created as a string - this is the best proxy for instance create time available using EC2 API
              nat_capable (bool): instance could provide nat services if this is true (can't if false) - this is the inverse of the SourceDestCheck flag
              interface_count (int):
              # interfaces (list): dicts containing interface data - see boto3 docs for ec2.instance.network_interfaces_attribute
              sec_groups (list): list of security group ID's attached to this instance
            }
      }
    sec_group_rules (dict): {
      <secruity group ID> (str): {

      }
    }



  node (dict): contains graph nodes and associated meta data

    <instance-id> (string): dict containing instances for this VPC  << only collected if the inventory_instances CLI agrument is set
        account_id (string): aws account #
        ssh_key_name (string): name of SSH key pair associated with instance when it was created, may be None
        priv_ipv4 (string):
        priv_hostname (string):
        platform (string): 'Windows'|None
        state (string): pending|running|shutting-down|terminated|stopping|stopped
        tags (list): list of AWS tags, i.e. list of dicts
        root_dev (string): "name" of root partition device - i.e. /dev/sda1
        root_create_time (string): time root device was created - used to estimate instance creation time
        poss_nat_inst (bool): T> check enabled, F> check disabled



    <route_table_id> (string: 'rtb-...')  << this is a route table - which I'm adding as a node in the network - i.e. a router
      name (string): name of the route route table from tags | rtb-id:vpc-id
      main: None|<vpc-id>  << uuseful for finding subnets that are implicitly associated w/the main route table
      assoc_subnets: [snid1, ..., snidn]  (may be empty)
      routes: [<route_data_dict>, ...]
        route_data_dict:
          dest_cidr:
          dest_pfx: << prefix list, likely only used when NH is a VPC endpoint
          gw_id: name/id of the gateway << can be one of sevaral types: igw, vgw, pcx, natgw, instance-if (when a nat instance)
          nat_gw:
          egress_gw: << if an egress ONLY gw
          nat_instance (string): ID of nat instance as next hop (given by Route.instance_id)
          state (string): active|blackhole|??? , not sure of other possibilites
          origin: 'CreateRouteTable'|'CreateRoute'|'enableVgwRoutePropogation'

    <subnet.id>:  << nodes are any hashable object, I'm using the string from the boto3 object property subnet.id
      name (string): name of the subnet, if there is one, otherwise use the subnet ID
      avail_zone: boto3.ec2.subnet.availability_zone
      default (boolean): True of this is the default subnet for the associated Availability Zone
      cidr: ...cidr_block
      assign_publics: ...map_public_ip_on_launch
      state: ...state
      'sec_groups': set(<sec_group_id>,...)  << this is a python set of unique security groups "attached" to the subnet (via the instances on the subnet)
      inacl|outacl (list):  list of dicts representing rules, one dict per rule
        {
          sgid (string): security group ID, redundant but neecessary for lookups
          protocol (string): all|tcp|ucp|???
          src_dst (list): list of strings representing CIDR blocks, security groups (and possibly other identifiers?), for inacl these will be sources, four out acl's they will be destinations
          ports (tuple): 2-tuple representing the destination port range (dest for both in and out acl's).  a single port is represented by a 2tuple with the same value in both slots
        }
      assoc_route_table: None | <rtb-id> << route table ID of the route table to which this subnet is associated  NB: all subnets are associated with one and only one rtb, but those assocaited w/the "main" rtb in a given vpc are not listed in rtb.associations - i.e. you have to find these by subtracting the set of subnets assocaited with route tables from the list of all subnets :(
      tags (list): of dicts of AWS tags

    <vpngatewayid> (dict):
      name (string): name of this gateway (from tags with Key = Name) or vpngw_id:avail_zone
      state (string): 'pending'|'available'|'deleting'|'deleted'
      avail_zone (string): AWS AZ in which this vgw resides (AvailabilityZone)
      vpc_attachments (dict): (VpcAttachments)
        vpc_id (string): id of an "attached" vpc (VpcId)
        state (string): attaching|attached|detaching|detached (State)
      tags (list): of dicts of AWS tags

    <natgwid>: (dict)
      vpc_id (string): id of the vpc in which this natgw is contained (bit redundant but helps w:lookups)
      subnet_id (string): id of subnet to which this natgw is attached
      state: pending| failed|available|deleting|deleted
      name (string): = ngw-id:subnet-id:vpc-id

    <internet_gw_id>: (string)
        name (string): name, from tag 'Name'
        tags (list): of dicts of AWS tags

    <peer-connection-id> (string): (dict)
      name (string): name of peer or vpce_id:vpc_id
      accepter_vpc_id (string): vpc ID of the accepting VPC
      requester_vpc_id (string): vpc ID of the requesting VPC
      status: (dict)
        Code (string): status code - e.g. peering_connection.status['Code']: pending-acceptance | failed | expired | provisioning | active | deleted | rejected 
        Message (string): related message, e.g. pcx.status['Message']
      tags (list): of dicts of AWS tags

    <vpce (endpoint) ID vpce_xxxx> (dict):
        name (string): service-name:vpce-id:vpc-id
        service_name (string): AWS service to which this VPCE connects (only S3 for now)
        state (string): Pending|Available|Deleting|Deleted
        route_table_ids (list):  list of route table ID's that, I assume, are using this as a NH for one or more routes  << this is possibly not needed for our puroposes here but might as well take it?
            rtb_id (string):


  edge: (dict) (also known as adj)
    <route_table_id>: (dict) of adjacent nodes, built using route tables
      <adj_node>: (dict) attributes; the adjacent node would be one of the existing nodes above, e.g. peering connection, subnet, etc.

reformatted rules: << list of rules, ea rule is dict containing sec_group_id, sources, proto and port
  [
    {
      'sgid': <security group id>,
      'source': ['<uid>:<grpid>:<grpname>', ...],  << i.e. this is a list of strings w/subformat that includes 3 bits of data uid, security grp id and sec group name; i believe the uid = the uid of the account owner
      'proto': <ip proto> << one of tcp, udp, icmp or all
      'ports': (<startport>, <endport>)  << string representation of the tupel (start, end)
    },
    ...
  ]

---

# protocol number:name map  # dict loaded from YAML file
proto_num (int): proto_name (string)

---

# check thresholds  # dict loaded from YAML file
check_name (string): threshold_value (int)

---

# risky ports # dict loaded from YAML file
app_proto_name (string):
  transport_proto (string):  # basically TCP or UDP
  ports (string): # list of ports for that L4 protocol
    port (int)  # list of ports

example YAML contents
'ssh':
  'tcp':
  'ports':
    - 22
'rdp':
  'tcp':
    - 3389
'Trinoo':
  'udp':
    - 27444
    - 31335

---

# allowed protocols  #  list loaded from YAML file
l3_protocol_number (int)  # this is the only thing in the file, one entry per allowed protocol, per line

example YAML content
- 6 # TCP
- 17 # UDP
- 1 # ICMP


---
# allowed_icmp - dict loaded from YAML

{'ipv4': [(0,0),(11,0),(11,1),...], 'ipv6': [...]}

example YAML:
'ipv4':
  'time exceeded':
    '11':  # << type number
      - '0'  # code numbers
      - '1'


